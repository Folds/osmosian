This file is the start of a bug-tracking system
for the Plain English programming environment.
The Plain English programming environment is called Cal.
Currently, the file has a .txt extension,
so that it will not be compiled into the executable.

Fixed issues.txt explains how the issues are rated.

\ ======================================
   
The following requests have been completed.
The program's change log is implicit
in the source code repository's change log.
These items should occasionally be moved to fixed issues.txt.


\ ======================================   
The following requests are roughly sorted
from higher priority to lower priority.

003.  Gray out (and disable) unused menu letters.
  Cal has an alphabetical menu structure.
  Currently, many of the letters do not have menu items.
  These blank menu letters look like they have menus, though.
  This is confusing to users, and makes it hard
  for them to learn what menus are available.
  Status:  Demonstrated.
  Benefit:  Important.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  all users.
  Requested by Jasper Paulsen on March 7, 2014.

003b (067).  Add F3 as a shortcut for find next.
  Audience:  Windows programmers.
  Status:  Demonstrated.
  Benefit:  Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 9, 2014.

003c (068). Add F5 as a shortcut for run (from the editor window).
  Audience:  Windows programmers.
  Status:  Implemented.
  Benefit:  Minor.
  Implementation difficulty:  Trivial.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 9, 2014.

002.  Update the documentation once the program has automated testing.
Automated tests make debugging easier.
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  not applicable
  Requested by Jasper Paulsen on March 7, 2014.

004.  Allow true vertical panning.
  Currently, the user can pan a text document
  by right-clicking and dragging the mouse.
  Unfortunately, this often causes the text to move over to the left,
  so that the left part of the text is off the screen.
  This is disorienting.
  The current work-around is to pan up-and-to-the-right,
  or pan down-and-to-the-right.
  It would be possible to modify
     the right-click-and-drag mouse event handler
     so that if the item being viewed is a text file,
     and the absolute value of the mouse's change in x is less
     than an arbitrary fraction of
     the absolute value of the mouse's change in y,
     the pan is purely vertical.
  The audiences are Windows programmers and Linux programmers.
  The benefit is important -- the non-vertical panning
  is very jarring to new users of the system.
  The status is designed.
  Implementation would be easy.
  Demoing would be easy.
  Testing would be easy.  The test could propose
    possible mouse event delta-x and delta-y values,
    and verify that the editor can compute
    the intended delta-x and delta-y values.
    The test would not need to actually pan the screen.
  Requested by Jasper Paulsen on March 7, 2014.

005.  Update the version and copyright information.
  Update both the program and the documentation.
  Audience:  all users.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Easy, but requires consultation with
    the Osmosian Order of Plain English Programmers.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.
    
006.  Hide unused tabs in the tab-strip.
  Cal has a tab-strip at the bottom of its screen.
  The tab-strip shows blank tabs for tabs
    that have not been populated with documents yet.
  This confuses users.
  The request is to hide all but one of the unused tabs.
  The one blank tab will let users start working on a new document.
  When the user starts working on a new document, unhide another tab.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Audience:  Windows programmers.
  Requested by Jasper Paulsen on March 7, 2014.

007.  Have a configuration file.
  Some users have preferences that they would like to keep from
  one session of Cal to another.  For example:
    font name,
    font size,
    font name for UI features,
    main window size and location,
    initial size and location of the main window
      of a program run by the compiler,
    state of the "most recently used menus" feature
  Store these settings in a configuration file, in Plain English.
  Include a prominent note that the program updates these settings,
    based on user actions.
  Audience:  Windows programmers and Linux programmers.
  Benefit:  Very important.  This feature will let Osmosian Masters
            have different settings from other programmers.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

Update the documentation to discuss configuration.
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Medium.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

008.  Change the default font for first-time users.
  If the system has "Courier New" available, use it.
  If "Courier New" is not available, try "Arial".
  If "Arial" is not available, use "Osmosian".
  Benefit:  Very important -- many potential users do not even try
            the system, because the first font they see is Osmosian,
            and they do not see how to change the font.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Profound.  (Because the demonstrator will
            not be a first-time user.)
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

Don't hide programs outside of the program's window.
  Currently, the program grabs a screenshot when it starts.
  The screenshot includes the full screen,
  not just the area the program is supposed to be in.
  This means that other programs are hidden
  whenever Cal is the active window.
  The benefit is important -- most Windows and Linux programmers
    alternate working in their IDEs and doing other things.
  The difficulty is hard -- it should not require much code,
    but it is not obvious which code needs to be fixed.
  The status is a request.
  The audiences are Windows programmers and Linux programmers.
  Demoing would be easy.  Windows programmers and Linux programmers
     would demo it all the time, but Osmosian Masters would only demo it
     when Cal did not occupy the full screen
     (or when they use two side-by-side instances of Cal).
  Testing would be medium.  The test would need to check that
     the size of the memory used by the main window
     was consistent with the intended size of the main window.
  Requested by Jasper Paulsen on March 7, 2014.

009.  Allow the user to change programs by clicking on a program outside of Cal.
  Currently, a Linux/Wine/Cal user has to
  press Alt-Tab-Tab to change to another program.
  The program could notice if a mouse click
  is outside of the program's window.
  If so, and if the program is not in the middle of something important,
  the program could yield control to the windowing system.
  The status is a request.
  The audiences are Windows programmers and Linux programmers.
  The benefit is important -- most Windows and Linux programmers
    alternate working in their IDEs and doing other things.
  The difficulty is medium.  It requires modifying mouse event handler(s)
    to call the pre-existing yield feature.
  Demoing would be easy.  Windows programmers and Linux programmers
    would demo it all the time, but Osmosian Masters would only demo it
    when Cal did not occupy the full screen.
  Testing would be profound.
  Requested by Jasper Paulsen on March 7, 2014.

010.  Allow the program to share the screen with other programs.
  The benefit is important -- most Windows and Linux programmers
    alternate working in their IDEs and doing other things.
    This feature would also allow Osmosian Masters
    to have two side-by-side instances of Cal,
    and copy-and-paste between the instances.
  The difficulty is hard, because the
    "Don't hide programs outside of the program's window"
    sub-feature is hard.
  The status is request.
  The audiences are Windows programmers and Linux programmers.
  Demoing would be easy.  Windows programmers and Linux programmers
    would demo it all the time, but Osmosian Masters
    would only demo it when Cal did not occupy the full screen
    (or when they use two side-by-side instances of Cal).
  Testing would be profound.
  Requested by Jasper Paulsen on March 7, 2014.

011.  Allow the menus (and status bar) to fold to two or three rows.
  Currently, Cal's menus and status bar need about 1000 pixels of width
  at the top of the screen.  This forces Cal to be at least 1000 pixels wide.
  (The width is approximate, because Cal does not check whether Windows
   has more than 96 pixels per inch.)
  Audience:  Windows programmers and Linux programmers.
  Benefit:  Important.  Most users would need this feature
    to be able to put two instances of Cal side-by-side.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Hard (without the ability
    to adjust the main window's width at run time);
    Easy (if the user can adjust the main window's width at run time).
  Testing difficulty: Medium.
  Status:  request.
  Requested by Jasper Paulsen on March 7, 2014.

012.  If there are multiple rows of menu letters, fade out the irrelevant row(s)
while a letter's menu is visible.
  Audience:  Windows programmers and Linux programmers.
  Benefit:  Important.  This will mitigate the confusion
    caused by folding the menu bar.
  Implementation difficulty:  Medium.
  Demoing difficulty: Hard (without the ability
    to adjust the main window's width at run time);
    Easy (if the user can adjust the main window's width at run time).
  Testing difficulty:  Hard.
  Status:  request.
  Requested by Jasper Paulsen on March 7, 2014.

013.  Allow changing the main window size and location at run-time.
  Currently, the main window is fixed at the top-left corner of the screen.
  Currently, the main window's size is fixed.
  Currently, the program does not have mouse cursors available
  for changing widths, changing heights, nor dragging window corners.
  When the mouse is close to the edges of the window, and the window
  is in "restore" mode, change the cursor accordingly.
  If the user clicks-and-drags the mouse
  while the mouse has such a cursor,
  adjust the window size and location.  Do not allow the window height
  or width to exceed the corresponding screen dimension.
  Status:  request.
  Audience:  Windows programmers and Linux programmers.
  Benefit:  Important.  It will allow users to adjust the size of Cal
            depending on how important their distractions from Cal are.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Easy.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

014.  Update the documentation after new cursors are added.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

015.  Update the documentation once the program
  is able to share the screen with other programs.
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

016.  Mark the tabs to indicate files with unsaved edits.
  For example, put a "*" before the name of each unsaved file.
  Audience:  programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

016b (066).  Allow user to enter font heights in decimal inches.
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

017.  Automate collecting the unit tests.
In practice, automated testing needs tool support for building test suites.
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- this makes testing much easier.
  Implementation difficulty:  Medium.
  Demo difficulty:  Easy.
  Test difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

018.  Only ask "Are you quite sure [you want to quit]" if there is unsaved work.
  Ask the user if they want to save the files.
  Update the documentation accordingly.
  Audience:  all users.
  Status:  request.
  Benefit:  minor.
  Implementation difficulty:  easy.
  Demoing difficulty:  medium.
  Testing difficulty:  medium.
  Requested by Jasper Paulsen on March 7, 2014.

019.  Allow the "Run" feature to launch the new instance of Cal
next to the first instance, instead of covering the first instance.
  Audience:  programmers.
  Benefit:  Probably important.  This would allow simultaneously
    using the draft program, and viewing the relevant source code.
  Status: request.
  Requested by Jasper Paulsen on March 7, 2014.

020.  Provide wrappers and/or documentation for the hash map feature.
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- this makes many algorithms easier.
  Implementation difficulty:  Medium.
  Demo difficulty:  Medium.
  Test difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

021.  Make it easy to search all files that are open,
regardless of whether the file's tab is visible.
  Status:  request.
  Audience:  programmers.
  Implementation difficulty:  easy.
  Demoing difficulty:  medium.
  Testing difficulty:  medium.
  Benefit:  Important -- this will help break large source
            files into smaller files.
  Requested by Jasper Paulsen on March 7, 2014.

022 through 023 are done.

024.  Make it easy to search all files in a project,
regardless of whether the file is open in the editor.
If the the search item finds files that are not open yet,
open the files that are found.
  Status:  request.
  Audience:  programmers.
  Implementation difficulty:  medium.
  Demoing difficulty:  medium.
  Testing difficulty:  medium.
  Benefit:  Important -- this will help break large source
            files into smaller files.
  Requested by Jasper Paulsen on March 7, 2014.

025.  Update the documentation to discuss searching multiple files.
  Audience:  programmers.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Medium.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

026 through 027 are done.
    
028.  Update the documentation (or F1-help, or a wiki) to discuss scrolling via the Ctrl-Home and Ctrl-End keys.
  Audience:  programmers.
  Status:  request.
  Benefit:  Minor - this would make it easier to navigate in large files.
  Implementation difficulty:  Easy.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.
    
029.  If the font is Courier New, show a subtle line at the 80 character mark.
  The intent is that if the user chooses to have a fixed width font,
  then make it easy for the user to manually line wrap.
  Make the number of characters be configurable.
  Make the font choice be configurable.
  Audience:  Linux programmers -- this is a feature of IntelliJ.
  Status:  request.
  Benefit:  Minor
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

030.  Show minimize, restore, and maximize buttons at the top right corner.
  Status:  request.
  Audience:  Windows programmers.
  Benefit:  minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

031.  Regularly back up unsaved work, in temporary files.
  Delete each temporary file after successfully
    saving the corresponding real file.
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

032.  Adjust the number of tabs, depending on the width of the main window.
  Status: request.
  Audience:  Windows programmers and Linux programmers.
  Implementation Difficulty:  easy.
  Demoing difficulty:  easy.
  Testing difficulty:  medium.
  Benefit:  Minor.
  Requested by Jasper Paulsen on March 7, 2014.

033.  Have an option to continue searching from the beginning.
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

034.  Have an option to search upward.
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

035.  Indent the contents of loops.
  Pretty print loops so that the row(s) after Loop: and before Repeat
  are indented twice as much as the Loop: statement.
  Status:  request.
  Audience:  Windows programmers and Linux programmers.
  Benefit:  minor.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

036.  Implement code-folding.  (Part 1)
  For example, it would be nice to view a summarized list
    of these feature requests.
  It would also be nice to be able to scroll through
    all of the procedure headers in a file, in just a few screens.
  The status is a request.  A simple version could be implemented by:
    just display the first row of each block,
    hide the blank lines between blocks,
    show a symbol that the code has been abbreviated,
    allow the user to click on the symbol to see the rest of the block,
    have a "fold all" feature and an "unfold all" feature.
  The benefit is important -- it will help find code,
    and help know what features are available.
    This will help the system scale to have more features.
  The difficulty level is medium.
  The testing difficulty is medium.
  The audience is programmers.
  Requested by Jasper Paulsen on March 7, 2014.

037.  Implement code-folding.  (Part 2)
  For example, it would be nice to view a summarized list
    of these feature requests, with the implementation difficulty,
    demoing difficulty, testing difficulty, benefit rating,
    audience, and status all in the summary.
  The status is a request.  It would be possible to have a request
    output a two-line summary, and have the code-folding feature
    (from Part 1) show the two line summary.
  The difficulty level is medium.
  The testing difficulty is medium.
  The audience is programmers.
  Requested by Jasper Paulsen on March 7, 2014.

038.  Add a vertical scroll bar.
  Currently, the user can move vertically in a document by panning
    (with the mouse), or by using the up and down arrow keys,
    or by using the page up and page down keys.
  None of these features indicate how much more document
    is above or below the currently shown region.
  None of these features allow the user to quickly
    go to a particular place in the document.
  Panning requires one click-and-drag of the viewable height,
    plus another drag of the viewable height,
    per page of text being panned.
  Audience -- Windows programmers.
     Windows users expect to be able to use the scroll bar to:
     quickly find a place in the document,
     quickly scroll through then entire document,
     fine-tune their location in the document.
  The benefit is important -- this feature will allow people to
     use large documents without needing Ctrl-F
     every time they want to find something.
  The status is a request.
  The implementation difficulty is hard.
     A scroll bar has many sub-features,
     all of which need to be implemented similarly to a standard.
     The relevant standard is Windows' implementation of vertical
     scroll bars.  Each individual sub-feature is easy.
  The testing difficulty is hard, for the same reasons
     as the implemenation difficulty.
     Each individual sub-feature has a medium testing difficulty.
  The demoing difficulty is medium.
     Each individual sub-feature can be demoed easily.
  This feature will be much easier to implement
     once name spaces are available.
  Requested by Jasper Paulsen on March 7, 2014.

039.  Allow the user to decide whether to regression test each build.
  This could be an Easter egg in the configuration file.
  Audience: Windows programmers and Linux programmers.
  Status: request.
  Benefit:  minor.
  Implementation difficulty:  Trivial.
  Demoing difficulty:  Easy.
  Testing difficulty:  Profound.
  Requested by Jasper Paulsen on March 7, 2014.

040.  Reduce the font leading (in non-Osmosian fonts).
  Currently, fonts like Courier New have a large gap between rows.
  This gap is much larger than in other text editors,
  such as gedit or Notepad.
  This leading could be reduced to typical heights.
  Benefit:  Minor.
  Audiences:  Windows programmers and Linux programmers.
  Status:  Request.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

041.  Use the correct number of pixels per inch.
  Currently, Cal assumes that there are 96 pixels per inch.
  Various versions of Windows (or its Control Panel options)
  can have different pixel densities,
  such as 72, 96, 120, 144, 150, et cetera pixels per inch.
  Benefit:  Minor.
  Implementation difficulty:  Medium.  It just needs a short procedure,
      but the procedure will need to make a Windows API call.
  Audience:  Windows programmers.  (specifically, those who
    have pixel densities other than 96 pixels per inch.)
  Demoing difficulty:  Hard.  Changing the Windows pixel density
    requires re-starting the computer.
  Testing difficulty:  Profound.
  Status:  request.
  Requested by Jasper Paulsen on March 7, 2014.

042.  Use border shading to suggest whether a button is pressed in.
  Audience:  Windows programmers -- this was a feature of Visual Basic.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

043.  Add a "frequently used" menu bar.
   Most of the time, a user only uses a few features from the menus.
   For example, when writing and running code, a user is likely to use:
   Comment, Find, Find Next, Open, Quit, Run, Save, Save As, Uncomment, Undo
   It would be possible to keep track of which menu commands
   have been called (using the menus, ignoring uses via Ctrl- keys)
   during the past arbitrary number of menu commands.
   It would also be possible to calculate how many menu items
   would fit in a horizontal row beneath the alphabetical menu.
   The most frequently used menu items could be put in such a row,
   in alphabetical order.  If no menu items have ever been used,
   the row could default to a few typical commands,
   with the rest of the row blank.
   Status:  Request.
   Audience:  Windows programmers.
   Benefit:  Minor.  It might make the system much easier to use.
   Implementation difficulty:  Easy.
   Demoing difficulty:  Hard, because of the lag
     due to the arbitrary number of recent uses.
   Testing difficulty:  Medium.  It would be possible to set up a mock menu,
       pass it a history of menu clicks, and verify which menu items
       appear in the mock frequently used menu.
       It would also be easy to verify that
       the real frequently used menu is visible.
  Requested by Jasper Paulsen on March 7, 2014.

044.  Update the documentation to discuss the "frequently used menu" bar.
  Audience:  all users.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Medium.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

045.  Change the sort order of byte and key declarations.
Currently, the byte and key declarations are scattered throughout the noodle.
  Audience:  Linux programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  easy.
  Demo difficulty:  Easy.
  Test difficulty:  Medium.

046.  Change the sort order of color declarations.
Currently, the color declarations are scattered throughout the noodle.
  Audience:  Linux programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  easy.
  Demo difficulty:  Easy.
  Test difficulty:  Medium.

047.  Use subtle shading to hint at the edges of the text editing area.
  Status:  request.
  Audience:  Windows programmers.
  Benefit:  minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

048.  Use shading to better distinguish the active tab from inactive tab(s).
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

049.  On WINE systems, show WINE's complaint about memory leak(s).
  Currently, the "wine cmd" shell reports something like the following after Cal quits:
fixme:heap:HeapSetInformation 0x110000 0 0x40bc08 4
  Audience:  Linux programmers.
  Status:  request.
  Benefit:  Important -- this will let Linux programmers mitigate their memory leaks.
  Implementation difficulty:  Profound.
  Demo difficulty:  Hard, unless the programmer is using WINE (which makes it easy).
  Test difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

050.  On WINE systems, prevent the following error messages:
  Currently, the "wine cmd" shell reports something like the following after Cal quits:
err:ole:CoGetClassObject class {96749377-3391-11d2-9ee3-00c04f797396} not registered
err:ole:CoGetClassObject class {96749377-3391-11d2-9ee3-00c04f797396} not registered
err:ole:create_server class {96749377-3391-11d2-9ee3-00c04f797396} not registered
err:ole:CoGetClassObject no class object {96749377-3391-11d2-9ee3-00c04f797396} could be created for context 0x7
  Audience:  Linux programmers.
  Status:  request.
  Benefit:  minor.
  Implementation difficulty:  Profound.
  Demo difficulty:  Hard, unless the programmer is using WINE (which makes it easy).
  Test difficulty:  Profound.
  Requested by Jasper Paulsen on March 7, 2014.

051.  On WINE systems, prevent the following error message:
  Currently, the "wine cmd" shell reports something like the following after Cal quits:
err:ole:CoInitializeEx Attempt to change threading model of this apartment from multi-threaded to apartment threaded
  Audience:  Linux programmers.
  Status:  request.
  Implementation difficulty:  Profound.
  Benefit:  minor.
  Demo difficulty:  Hard, unless the programmer is using WINE (which makes it easy).
  Test difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

052.  On WINE systems, prevent the following error message:
  Currently, the "wine cmd" shell reports something like the following after Cal quits:
fixme:font:RemoveFontMemResourceEx (0x8771ccb9) stub
  Audience:  Linux programmers.
  Status:  request.
  Implementation difficulty:  easy.
  Benefit:  minor.
  Demo difficulty:  Hard, unless the programmer is using WINE (which makes it easy).
  Test difficulty:  Hard.
  Requested by Jasper Paulsen on March 7, 2014.

053.  Update the documentation to reflect updated error messages while closing.
  Audience:  Linux programmers.
  Status:  request.
  Benefit:  Important -- the documentation needs to be accurate.
  Implementation difficulty:  Medium.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

054.  Add namespaces.
  Several features currently use names that would be very handy
    for describing parts of new features.
  This pre-emption makes it far more difficult to add features.
  The audience is programmers.
  The implementation difficulty is profound.
  The testing difficulty is medium.
  Benefit: Very important.
  Requested by Jasper Paulsen on March 7, 2014.
  
055.  Add an array feature (either dynamic or fixed length).
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- many numerical and geographical programs use arrays.
  Implementation difficulty:  Hard.
  Demo difficulty:  Medium.
  Test difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

056.  Allow re-sizing arrays.
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- this makes many algorithms easier.
  Implementation difficulty:  Hard.
  Demo difficulty:  Medium.
  Test difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

057.  Document the array feature(s).
  Audience:  Windows programmers and Linux programmers.
  Status:  request.
  Benefit:  Important -- this makes many algorithms easier.
  Implementation difficulty:  Medium.
  Demo difficulty:  Easy.
  Test difficulty:  not applicable.
  Requested by Jasper Paulsen on March 7, 2014.

058.  Show the line number(s) in the left margin.
  Audience:  Linux programmers -- IntelliJ has this feature.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.
  
059  Implement enumerated types.
  For example, it would be nice to have
    an enumerated type of difficulty rating levels.
  The difficulty level is profound, because it requires namespaces.
  The testing difficulty is medium.
  The status is a request.
    Java has a good model for how enumerated types should work.
  The audience is Linux programmers.
  The benefit is minor.
  Requested by Jasper Paulsen on March 7, 2014.

060.  Allow the user to change fonts of user interface features.
  For example, the menus, the status bar, and the tab-strip.
  This can be a configuration file Easter egg.
  Audience:  Windows programmers and Linux programmers.
  Implementation difficulty:  Easy.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Benefit:  minor.
  Status: request.
  Requested by Jasper Paulsen on March 7, 2014.

061.  Make it easy to open all of the files in a project.
  Audience: Windows programmers and Linux programmers.
  Status: request.
  Benefit:  Might do more harm than good.
  Implementation difficulty:  medium.
  Demoing difficulty:  medium.
  Testing difficulty:  medium.
  Requested by Jasper Paulsen on March 7, 2014.
  
062.  Allow using the Desktop after documents have been loaded into the editor.
  This might require using a tab for the purpose.
  Audience:  All users.
  Status:  request.
  Benefit:  Possibly does more harm than good.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

063.  Allow opening files that are selected in the project file.
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.
  
064.  Allow user to enter font heights in points (72nds of inches).
  Audience:  Windows programmers.
  Status:  request.
  Benefit:  Minor.
  Implementation difficulty:  Medium.
  Demoing difficulty:  Medium.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

065.  Allow splitting an editor window into a top section and a bottom section,
with an adjustable slider between them.
  Audience:  Windows programmers -- this was a feature of Visual Basic.
  Status:  request.
  Benefit:  Possibly does more harm than good.
  Implementation difficulty:  Hard.
  Demoing difficulty:  Easy.
  Testing difficulty:  Medium.
  Requested by Jasper Paulsen on March 7, 2014.

\ ======================================   
\ Recent requests that have been prioritized higher than here.
066.  See 016b.

067.  See 003b.

068.  See 003c.



\ ======================================   
Unsorted requests:


