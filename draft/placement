\ copyright © 2006 the osmosian order (3040)

\ features that affect the main window's placement on the screen,
\ including minimization, maximization, restoration, activation, and window size.

to handle minimize:
\  minimize the main window.
\  debug the main window.

to handle maximize:
  if the screen is maximized given the main window, exit.
  maximize the screen.
  resize the main window given the screen.
\  debug the main window.
\  resize the screen canvas.
  resize the memory canvas.
  resize.
  create an event.
  put "refresh" into the event's kind.
  enque the event.

to handle restore:
  if the screen is restored given the main window, exit.
  restore the screen.
  resize the main window given the screen.
\  debug the main window.
\  resize the screen canvas.
  resize the memory canvas.
  resize.
  create an event.
  put "refresh" into the event's kind.
  enque the event.

to handle toggle screensize:
  if the screen is restored given the main window, handle maximize; exit.
  handle restore.

to convert an l-param to a spot:
  split the l-param into a wyrd and another wyrd.
  put the wyrd into the spot's y.
  put the other wyrd into the spot's x.
  multiply the spot by the tpp.

to decide if it is possible to unminimize:
  if running on wine, say no.
  say yes.

to decide if running on wine:
  say yes.

\to move a window:
\  initialize a window placement.
\  call "User32.dll" "GetWindowPlacement"
\    with the window and the window placement's whereabouts
\    returning a flag.
\  if the flag is no, exit.
\  put the window placement's boxWhenRestored in a box.
\  put the box's left plus 50 in the box's left.
\  put the box's right plus 50 in the box's right.
\  put the box's top plus 25 in the box's top.
\  put the box's bottom plus 25 in the box's bottom.
\  put the box in the window placement's boxWhenRestored.
\  call "User32.dll" "SetWindowPlacement"
\    with the window and the window placement's whereabouts
\    returning another flag.

to debug a window:
  initialize a window placement.
  call "User32.dll" "GetWindowPlacement"
    with the window and the window placement's whereabouts.
  put the window placement's boxWhenRestored in a box.
  clear a string.
  append "window=" to the string.
  append the window to the string.
  append the crlf string to the string.
  append "flags=" to the string.
  append the window placement's flags to the string.
  append ", showCmd=" to the string.
  append the window placement's showCmd to the string.
  append the crlf string to the string.
  append "when minimized: " to the string.
  append "x=" to the string.
  append the window placement's upperLeftCornerWhenMinimized's x to the string.
  append ", y=" to the string.
  append the window placement's upperLeftCornerWhenMinimized's y to the string.
  append the crlf string to the string.
  append "when maximized: " to the string.
  append "x=" to the string.
  append the window placement's upperLeftCornerWhenMaximized's x to the string.
  append ", y=" to the string.
  append the window placement's upperLeftCornerWhenMaximized's y to the string.
  append the crlf string to the string.
  append "currently: " to the string.
  append "left=" to the string.
  append the box's left to the string.
  append ", top=" to the string.
  append the box's top to the string.
  append ", right=" to the string.
  append the box's right to the string.
  append ", bottom=" to the string.
  append the box's bottom to the string.
  append the crlf string to the string.
  debug the string.

to decide if a window is minimized:
  initialize a window placement.
  call "User32.dll" "GetWindowPlacement"
    with the window and the window placement's whereabouts.
  if the window placement's showCmd is 6 [sw_minimize],
    say yes.
  say no.
  
a window placement has
  a number called length,
  a number called flags,
  a number called showCmd,
  a spot called upperLeftCornerWhenMinimized,
  a spot called upperLeftCornerWhenMaximized,
  a box called boxWhenRestored.

to resize a window given a box (using SetWindowPlacement):
  put the box in a box called pixel box.
  scale the pixel box given 1 / the tpp.
  adjust the pixel box given 0 and 0 and 1 and 1.
  initialize a window placement.
  call "User32.dll" "GetWindowPlacement"
    with the window and the window placement's whereabouts returning a flag.
  if the flag is no, exit.
  put the pixel box in the window placement's boxWhenRestored.
  call "user32.dll" "SetWindowPlacement"
    with the window and the window placement's whereabouts.

to initialize a window placement:
  put the window placement's magnitude in the window placement's length.

to initialize the canvases:
  initialize the screen canvas.
  initialize the memory canvas.
  put the memory canvas into the current canvas.

to initialize the screen:
  call "user32.dll" "GetSystemMetrics" with 0 [sm_cxscreen]
    returning the screen's maximum pixel width.
  call "user32.dll" "GetSystemMetrics" with 1 [sm_cyscreen]
    returning the screen's maximum pixel height.
  if the screen's maximum pixel width is greater than 1000,
    put 1000 in the screen's restored pixel width.
  if the screen's maximum pixel width is not greater than 1000,
    put the screen's maximum pixel width
    in the screen's restored pixel width.
  if the screen's maximum pixel height is greater than 100,
    put the screen's maximum pixel height minus 50
    in the screen's restored pixel height.
  if the screen's maximum pixel height is not greater than 100,
    put the screen's maximum pixel height divided by 2
    in the screen's restored pixel height.
  put 96 into the ppi. \ pixels per inch.
  put the tpi divided by the ppi into the tpp. \ twips per pixel.
  restore the screen.

to restore a screen:
  resize the screen given the screen's restored pixel width
    and the screen's restored pixel height.

to maximize a screen:
  resize the screen given the screen's maximum pixel width
    and the screen's maximum pixel height.

to resize a screen given a pixel width and a pixel height:
  put the pixel width in the screen's pixel width.
  put the pixel height in the screen's pixel height.
  put the screen's pixel width times the tpp into a width.
  put the screen's pixel height times the tpp into a height.
  put 0 and 0 and the width and the height into the screen's box.
  subtract the tpp from the screen's right-bottom.

to decide if a screen is maximized given a window:
  if the window is minimized, say no.
  if the screen is maximized, say yes.
  say no.

to decide if a screen is maximized:
  if the screen's pixel width is less than
    the screen's maximum pixel width, say no.
  if the screen's pixel height is less than
    the screen's maximum pixel height, say no.
  say yes.

to decide if a screen is restored given a window:
  if the window is minimized, say no.
  if the screen is maximized, say no.
  say yes.

to initialize the screen canvas:
   call "user32.dll" "GetWindowDC" with the main window returning the screen canvas.
   normalize the screen canvas.

to move a window left:
  call "user32.dll" "GetWindowRect" with the main window and a box's whereabouts.
  subtract the screen's pixel width from the box's left.
  call "user32.dll" "MoveWindow"
    with the window and the box's left and the box's top
    and the screen's pixel width and the screen's pixel height and 1.

to move a window right:
  call "user32.dll" "GetWindowRect" with the main window and a box's whereabouts.
  add the screen's pixel width to the box's left.
  call "user32.dll" "MoveWindow" with the window
    and the box's left and the box's top
    and the screen's pixel width and the screen's pixel height and 1.

to put the mouse's spot into a spot:
  call "user32.dll" "GetCursorPos" with the spot's whereabouts.
  call "user32.dll" "ScreenToClient" with the main window and the spot's whereabouts. \ in case window is on another monitor.
  call "gdi32.dll" "DPtoLP" with the screen canvas and the spot's whereabouts and 1.

to refresh the screen:
  refresh the screen given the screen's box.

to refresh the screen given a box:
  call "gdi32.dll" "BitBlt" with the screen canvas
   and the box's left and the box's top and the box's width and the box's height 
   and the current canvas and the box's left and the box's top and 13369376 [srccopy].

to resize a window given a box (using MoveWindow):
   put the box's left divided by the tpp into a number called left.
   put the box's top divided by the tpp into a number called top.
   put the box's right divided by the tpp into a number called right.
   put the box's bottom divided by the tpp into a number called bottom.
   put 1 plus the right minus the left into a number called width.
   put 1 plus the bottom minus the top into a number called height.
   call "user32.dll" "MoveWindow" with the window
     and the left and the top and the width and the height and no.

to resize a window given a screen:
  if the screen is maximized,
    resize the window given the screen's box (using MoveWindow); exit.
  resize the window given the screen's box (using SetWindowPlacement).

to restore a canvas:
  call "gdi32.dll" "RestoreDC" with the canvas and -1. \ need to use -1, windows documentation is wrong

to restore a window:
  call "user32.dll" "ShowWindow" with the window and 9 [sw_restore].

the screen canvas is a canvas.

the screen is a screen.

to show a console:
  if the console is nil, exit.
  save the current canvas.
  draw the console.
  refresh the screen given the console's box.
  restore the current canvas.

a screen has a box, a pixel height, a pixel width,
   a restored pixel height, a restored pixel width,
   a maximum pixel height, and a maximum pixel width.

to widen a window:
  initialize a window placement.
  call "User32.dll" "GetWindowPlacement"
    with the window and the window placement's whereabouts
    returning a flag.
  if the flag is no, exit.
  put the window placement's boxWhenRestored in a box.
  put the box's right plus 100 in the box's right.
  put the box in the window placement's boxWhenRestored.
  call "User32.dll" "SetWindowPlacement"
    with the window and the window placement's whereabouts
    returning another flag.

to initialize the memory canvas:
  call "gdi32.dll" "CreateCompatibleDC" with the screen canvas returning the memory canvas.
  call "gdi32.dll" "GetCurrentObject" with the memory canvas
    and 7 [obj_bitmap] returning the saved memory hbitmap.
  call "gdi32.dll" "CreateCompatibleBitmap" with the screen canvas
    and the screen's pixel width and the screen's pixel height returning an hbitmap.
  call "gdi32.dll" "SelectObject" with the memory canvas and the hbitmap.
  normalize the memory canvas.

to finalize the memory canvas:
  call "gdi32.dll" "SelectObject" with the memory canvas
    and the saved memory hbitmap returning an hbitmap.
  call "gdi32.dll" "DeleteObject" with the hbitmap.
  call "gdi32.dll" "DeleteDC" with the memory canvas.

to resize the memory canvas:
  call "gdi32.dll" "SelectObject" with the memory canvas
    and the saved memory hbitmap returning an hbitmap.
  call "gdi32.dll" "DeleteObject" with the hbitmap.
  call "gdi32.dll" "GetCurrentObject" with the memory canvas
    and 7 [obj_bitmap] returning the saved memory hbitmap.
  call "gdi32.dll" "CreateCompatibleBitmap" with the screen canvas
    and the screen's pixel width and the screen's pixel height returning the hbitmap.
  call "gdi32.dll" "SelectObject" with the memory canvas and the hbitmap.
  normalize the memory canvas.
  
to finalize the screen canvas:

