\ copyright © 2006 the osmosian order (3040)

\ The desktop's bar includes the dialog.  The dialog's code is in another file.
\ The dialog shares screen space with the menus and the status,
\ so it is not visible when they are, and vice versa.

\ The desktop's bar includes the status.  The status' code is in another file.
\ The status' code includes the regression test results and their menu.

to add a color and a handler to a menu:
  if the menu is nil, exit.
  create a command.
  append the command to the menu's commands.
  put the swatch width into the command's width.
  put the handler into the command's handler.
  put the color into the command's color.

to add a font height to a submenu given a highlight color:
  put the font height / 1 inch into a ratio.
  convert the ratio to a ratio string.
  put the ratio string then " Inch" into a string called itemname.
  put "handle font height given "
    then the ratio string then " inch" into a string called handler.
  put the white color into a color.
  get a font.
  if the font height is the font's height,
    put the highlight color into the color.
  add the itemname and the handler and the color to the submenu.

to add a name and a handler and a color to a submenu:
  add the name and "" and the handler and the color to the submenu.

to add a name and a handler to a menu:
  if the menu is nil, exit.
  create a command.
  append the command to the menu's commands.
  put the command height into the command's width.
  put the name into the command's name.
  put the handler into the command's handler.
  put the white color into the command's color.
  put "left" into the command's alignment.

to add a name and a handler to a submenu:
  add the name and "" and the handler to the submenu.

to add a name and a shortcut and a handler and a color to a submenu:
  if the submenu is nil, exit.
  create a command.
  append the command to the submenu's commands.
  put the submenu width into the command's width.
  put the name into the command's name.
  put the shortcut into the command's shortcut.
  put the handler into the command's handler.
  put the color into the command's color.
  put "left" into the command's alignment.

to add a name and a shortcut and a handler to a submenu:
  add the name and the shortcut and the handler
    and the white color to the submenu.

to add a name to a submenu:
  put the name into a string.
  lowercase the string.
  if the string ends with "…",
    remove the last byte from the string.  
  if the string ends with "...",
    remove the last three bytes from the string.  
  put "handle " then the string in a handler.
  put "" in a shortcut.
  add the name and the shortcut and the handler to the submenu. 

to add one to a number:
  put the number plus 1 in the number.

to add swatches to a submenu given a handler:
  if the submenu is nil, exit.
  add the clear color and the handler to the submenu.
  put the palette width divided by 3 into the submenu's commands' last's width.
  put "clear" into the submenu's commands' last's name.
  put "center" into the submenu's commands' last's alignment.
  add the white color and the handler to the submenu.
  put the palette width divided by 3 into the submenu's commands' last's width.
  add the black color and the handler to the submenu.
  put the palette width divided by 3 into the submenu's commands' last's width.
  add swatches to the submenu given the handler and the gray color.
  add swatches to the submenu given the handler and the red color.
  add swatches to the submenu given the handler and the orange color.
  add swatches to the submenu given the handler and the yellow color.
  add swatches to the submenu given the handler and the lime color.
  add swatches to the submenu given the handler and the green color.
  add swatches to the submenu given the handler and the teal color.
  add swatches to the submenu given the handler and the cyan color.
  add swatches to the submenu given the handler and the sky color.
  add swatches to the submenu given the handler and the blue color.
  add swatches to the submenu given the handler and the purple color.
  add swatches to the submenu given the handler and the magenta color.
  add swatches to the submenu given the handler and the violet color.

to add swatches to a submenu given a handler and a color:
  if the submenu is nil, exit.
  privatize the color.
  put 875 into the color's lightness.
  loop.
  add the color and the handler to the submenu.
  subtract 125 from the color's lightness.
  if the color's lightness is less than 125, exit.
  repeat.

to adjust a menu given a spot and a width:
  if the menu is nil, exit.
  privatize the spot.
  put the spot's x plus the width into a right coord.
  loop.
    get a command from the menu's commands.
    if the command is nil, break.
    if the spot's x plus the command's width is greater than the right,
      put the original spot's x into the spot's x;
      add the command height to the spot's y.
    put the spot and the spot into the command's roundy box.
    add the command's width and the command height
      to the command's roundy box's right-bottom.
    add the command's width to the spot's x.
  repeat.

to adjust some tabs:
  if the tabs' count is 0, exit.
  put the switch's box's width divided by the tabs' count into a width.
  round the width to the tpp.
  loop.
  get a tab from the tabs.
  if the tab is nil, exit.
  put the switch's box into the tab's box.
  add 1/4 inch to the tab's top.
  if the tab is not the tabs' first,
    put the tab's previous' right into the tab's left.
  if the tab is not the tabs' last,
    put the tab's left plus the width into the tab's right.
  repeat.

the bar has a height, a box, a display box and a mode.

to choose a color for a command (temporary color):
  put the command's color into the color.
  if the color is clear, put the white color into the color.
  if the command is pointless,
    put the desktop color into the color.

the command height is a height equal to 1/3 inch.

a command is a thing with
  a roundy box,
  a width,
  a color, a font, an alignment,
  a name, a shortcut, and a handler.

to create a command:
  allocate memory for the command.
  put the clear color into the command's color.
  put the default font into the command's font.
  put 1/12 inch into the command's roundy box's radius.
  put "left" into the command's alignment.

to create a menu:
  allocate memory for the menu.
  put the big-a byte into a byte.
  loop.
    if the byte is greater than the big-z byte, break.
    put the byte into a string.
    add the string and the string to the menu.
    put "center" into the menu's commands' last's alignment.
    add 1 to the byte.
  repeat.
  put the bar's display's left-top into a spot.
  adjust the menu given the spot and 26 times the swatch width.

to create a submenu:
  allocate memory for the submenu.

to create a tab:
  allocate memory for the tab.

the current menu is a menu.

the current process is a process.

the current tab is a tab.

to debug a handler (because it is undispatched):
  debug "Internal error 763 - command not properly dispatched:  '" then the handler then "'.".

to decide if a command is pointless:
  put the command's handler in a string called handler.
  if the handler's length is not 1, say no.
  if the handler has a letter menu, say no.
  say yes.

to decide if an event is any shortcut:
  if the event is nil, say no.
  if the event's key is any function key, say yes.
  if the event is not modified, say no.
  if the event's key is between the a-key and the z-key, say yes.
  say no.

to decide if an event is ctrl-tab:
  if the event is nil, say no.
  if the event's kind is not "key down", say no.
  if the event's key is not the tab key, say no.
  if the event's ctrl flag is not set, say no.
  say yes.

to decide if a node should be read-only:
  if the node is nil, say  no.
  if the node's kind is not "file", say no.
  loop.
  get a tab from the tabs.
  if the tab is nil, say no.
  if the tab's node is nil, repeat.
  if the tab's node is the node, repeat.
  if the tab's node's kind is not "file", repeat.
  if the tab's node's path is the node's path, say yes.
  repeat.

to decide if a number is positive:
  if the number is greater than 0, say yes.
  say no.

to decide if a ratio is positive:
  privatize the ratio.
  de-sign the ratio.
  if the ratio's denominator is 0, say no.
  if the ratio's numerator is positive, say yes.
  say no.

to decide if a spot is in the bar:
  if the spot is in the bar's box, say yes.
  say no.

to decide if a spot is in a command:
  if the command is nil, say no.
  if the spot is in the command's roundy box, say yes.
  say no.

to decide if a spot is in a menu:
  if the menu is nil, say no.
  find a command given the menu and the spot.
  if the command is nil, say no.
  say yes.

to decide if a spot is in the pad:
  if the spot is in the pad's box, say yes.
  say no.

to decide if a spot is in the switch:
  find a tab given the spot.
  if the tab is nil, say no.
  say yes.

to decide if a spot is in a tab:
  if the tab is nil, say no.
  if the spot is in the tab's box, say yes.
  say no.

to decide if a string has a letter menu:
  if the string's length is not 1, say no.
  put the string in a string called handler.
  create a submenu.
  populate the submenu given the string and the current tab's mode (letter).
  if the submenu is populated, destroy the submenu; say yes.
  destroy the submenu.
  say no.

to decide if a submenu is populated:
  if the submenu is nil, say no.
  get a command from the submenu's commands.
  if the command is nil, say no.
  say yes.

to decide if a tab is free:
  if the tab is nil, say no.
  if the tab's node is nil, say no.
  if the tab's node's kind is not "root", say no.
  say yes.

to describe a font height returning a string:
  put the font height / 1 inch into a ratio.
  convert the ratio to a ratio string.
  put the ratio string then " Inch" into the string.

the desktop color is a color.

to destroy a tab:
  if the tab is nil, exit.
  destroy the tab's node's root node.
  deallocate the tab.

to draw the bar:
  unmask everything.
  draw the bar's box with the black color and the black color.
  draw the bar's box with the desktop color
    and the desktop color and 1/8 inch (rounding the top).
  if the bar's mode is "dialog", draw the dialog; exit.
  draw the menu.
  draw the status.

to draw a box with a border color and a fill color and a radius (rounding the bottom):
  put the box and the radius into a roundy box.
  draw the roundy box with the border and the fill.
  privatize the box.
  put the box's height divided by 2 into a height.
  put the box's top plus the height into the box's bottom.
  draw the box with the border and the clear color.
  add the tpp to the box's bottom.
  draw the box with the clear color and the fill.

to draw a box with a border color and a fill color and a radius (rounding the top):
  put the box and the radius into a roundy box.
  draw the roundy box with the border and the fill.
  privatize the box.
  put the box's height divided by 2 into a height.
  put the box's bottom minus the height into the box's top.
  draw the box with the border and the clear color.
  subtract the tpp from the box's top.
  draw the box with the clear color and the fill.

to draw a command:
  if the command is nil, exit.
  unmask everything.
  choose a color for the command (temporary color).
  draw the command's roundy box with the black color and the color.
  put the command's roundy box into a box.
  adjust the box given 1/8 inch and 0 and -1/8 inch and 0.
  \ don't mask to the box, menu letters are too big to fit
  mask outside the command's roundy box.
  draw the command's name in the box with the black color
    and the command's font and the command's alignment.
  draw the command's shortcut at the right of the box
    with the black color and the command's font.

to draw some commands:
  get a command from the commands.
  if the command is nil, exit.
  draw the command.
  repeat.

to draw the desktop:
  draw the bar.
  draw the switch.
  draw the pad.
  draw the current menu.

to draw a menu:
  if the menu is nil, exit.
  draw the menu's commands.

to draw the pad:
  mask only outside the pad's box.
  draw the pad's box with the desktop color and the desktop color.
  if the current tab's mode is "finder", draw the current tab's node; exit.
  if the current tab's mode is "editor", draw the current tab's node's source; exit.
  if the current tab's mode is "docster", draw the current tab's node's document; exit.
  if the current tab's mode is "writer", draw the current tab's node's page; exit.

to draw the switch:
  mask only outside the switch's box.
  draw the switch's box with the black color and the black color.
  put the switch's box into a box.
  subtract 1/3 inch from the box's bottom.
  draw the box with the desktop color and the desktop color.
  draw the tabs.

to draw a tab:
  if the tab is nil, exit.
  mask only outside the tab's box.
  draw the tab's box with the desktop color
    and the desktop color and 1/8 inch (rounding the bottom).
  if the tab's previous is not nil,
    draw the tab's box's left line with the black color.
  if the tab is not the current tab,
    draw the tab's box's top line with the black color.
  draw the tab's name in the center of the tab's box
    with the black color and the default font.

to draw some tabs:
  get a tab from the tabs.
  if the tab is nil, exit.
  draw the tab.
  repeat.

to fill some tabs:
  get a tab from the tabs.
  if the tab is nil, exit.
  put "finder" into the tab's mode.
  create the tab's node.
  open the tab's node.
  repeat.

to finalize:
  destroy the tabs.
  finalize the compiler.
  finalize the writer.
  finalize the editor.
  finalize the finder.
  finalize the desktop.

to finalize the bar:
  finalize the status.
  destroy the menu.

to finalize the desktop:
  finalize the switch.
  finalize the pad.
  finalize the bar.

to finalize the pad:

to finalize the switch:

to find a command given a menu and a spot:
  void the command.
  if the menu is nil, exit.
  loop.
  get the command from the menu's commands.
  if the command is nil, exit.
  if the spot is in the command, exit.
  repeat.

to find a directory to compile:
  clear the directory.
  if the current tab's node is nil, exit.
  if the current tab's node's source is nil, exit.
  put the current tab's node's directory into the directory.

to find a free tab starting with a tab:
  privatize the tab.
  loop.
  if the tab is nil, break.
  if the tab is free, break.
  put the tab's next into the tab.
  repeat.
  put the tab into the free tab.

the find mode is a string.
\ find, check spelling,
\ check spelling - entire document,
\ check spelling - current page only

to find a tab given a spot:
  void the tab.
  loop.
  get the tab from the tabs.
  if the tab is nil, exit.
  if the spot is in the tab, exit.
  repeat.

to format a string to fit in a box given a font:
  put the box's width minus 1/8 inch into a width.
  loop.
  if the string's length is less than 2, exit.
  get another width given the string and the memory canvas and the font.
  if the other width is less than the width, exit.
  remove the last byte from the string.
  remove the last byte from the string.
  append "…" to the string.
  repeat.

a free tab is a tab.

to get a font:
  if the current tab's mode is "editor",
    get the font given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    get the font given the current tab's node's page; exit.
  put the default font in the font.

to get a font given a page:
  if the page is nil, put the default font in the font; exit.
  get the font given the page's text.

to get a font given a source:
  if the source is nil, put the default font in the font; exit.
  get the font given the source's text.

to get a font given a text:
  if the text is nil, put the default font in the font; exit.
  put the text's font in the font.

to get a height from a handler given a prefix:
  put 0 in the height.
  if the handler does not start with the prefix, exit.
  if the handler does not end with " inch", exit.
  get a residue from the handler after the prefix.
  remove five bytes from the residue.
  convert the residue to a ratio.
  put the ratio times 1 inch in a ratio called temp.
  put the temp's numerator divided by the temp's denominator into the height.

to get a number from a handler given a prefix:
  put 0 in the number.
  if the handler does not start with the prefix, exit.
  get a residue from the handler after the prefix.
  convert the residue to the number.

to gray out a submenu:
  if the submenu is nil, exit.
  loop.
    get a command from the submenu's commands.
    if the command is nil, exit.
    put the desktop color in the command's color.
  repeat.

to handle align given an alignment:
  if the current tab's mode is "writer",
    handle align given the current tab's node's page and the alignment; exit.
  cluck.

to handle border given a color:
  if the current tab's mode is "writer",
    handle border given the current tab's node's page and the color; exit.
  cluck.

to handle bring to front:
  if the current tab's mode is "writer",
    handle bring to front given the current tab's node's page; exit.
  cluck.

to handle capitalize:
  if the current tab's mode is "editor",
    handle capitalize given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    handle capitalize given the current tab's node's page; exit.
  cluck.

to handle check spelling:
  if the current tab's mode is "editor",
    handle check spelling given the current tab's node's source; exit.
  cluck.

to handle check spelling (current page only):
  if the current tab's mode is "writer",
    handle check spelling given the current tab's node's page (current page only); exit.
  cluck.

to handle check spelling (entire document):
  if the current tab's mode is "writer",
    handle check spelling given the current tab's node's page (entire document); exit.
  cluck.

to handle close:
  if the current tab's mode is "writer",
    handle close (writer); exit.
  handle close (other).

to handle close (other):
  if the current tab's node is root-level, cluck;
    deselect the nodettes in the current tab's node;
    show the desktop with status; exit.
  if the user is not willing to close the current tab's node, exit.
  show status "Closing...".
  close the current tab's node.
  switch the current tab to the current tab's node's parent node.
  show the desktop with status.
  refresh the cursor.

to handle close (writer):
  handle close without drawing (writer).
  show the desktop with status.
  refresh the cursor.

to handle close all:
  show status "Closing...".
  get a tab from the tabs (backwards).
  if the tab is nil, break.
  switch to the tab.
  if the tab's node is modified, show the desktop.
  if the user is not willing to close the tab's node, break.
  collapse the tab's node to root-level.
  deselect the nodettes in the tab's node.
  switch the tab to the tab's node.
  repeat.
  show the desktop with status.

to handle close without drawing (writer):
  close the current tab's node's page.
  void the current tab's node's page.
  switch the current tab to the current tab's node.

to handle a command:
  if the command is nil, exit.
  \ offer it dispatchers
  put the command's handler in a handler.
  if the handler's length is 1,  handle the command (letter);   exit.
  if the handler is "alignment...", handle the command (alignment...); exit.
  if the handler is "border...", handle the command (border...); exit.
  if the handler is "check spelling...", handle the command (check spelling...); exit.
  if the handler is "color...",  handle the command (color...); exit.
  if the handler is "fill...",   handle the command (fill...);  exit.
  if the handler is "font height...", handle the command (font height...); exit.
  if the handler is "grid...",   handle the command (grid...);  exit.
  if the handler is "label...",  handle the command (label...); exit.
  if the handler is "pen...",    handle the command (pen...);   exit.
  if the handler is "sort...",   handle the command (sort...);  exit.
  if the handler is "tests passed...", handle the command (tests passed...); exit.
  if the handler is "tests failed...", handle the command (tests failed...); exit.
  \ do it dispatchers
  show the desktop.
  if the handler is "handle bring to front", handle bring to front; exit.
  if the handler is "handle align center", handle align given "center"; exit.
  if the handler is "handle align left",   handle align given "left"; exit.
  if the handler is "handle align right",  handle align given "right"; exit.
  if the handler is "handle border", handle border given the command's color; exit.
  if the handler is "handle fill", handle fill given the command's color; exit.
  if the handler starts with "handle font height given ",
    handle font height given the handler (general); exit.
  if the handler is "handle font height other", handle font height other; exit.
  if the handler is "handle font name", handle font name; exit.
  if the handler is "handle radius", handle radius; exit.
  if the handler is "handle pen", handle pen given the command's color; exit.
  if the handler is "handle capitalize", handle capitalize; exit.
  if the handler is "handle check spelling", handle check spelling; exit.
  if the handler is "handle check spelling (entire document)", handle check spelling (entire document); exit.
  if the handler is "handle check spelling (current page only)", handle check spelling (current page only); exit.
  if the handler is "handle close", handle close; exit.
  if the handler is "handle close all", handle close all; exit.
  if the handler is "handle comment", handle comment; exit.
  if the handler is "handle compile", handle compile; exit.
  if the handler is "handle copy", handle copy; exit.
  if the handler is "handle cut", handle cut; exit.
  if the handler is "handle decrypt", handle decrypt; exit.
  if the handler is "handle duplicate", handle duplicate; exit.
  if the handler is "handle enlarge", handle enlarge; exit.
  if the handler is "handle encrypt", handle encrypt; exit.
  if the handler is "handle extract globals", handle extract globals; exit.
  if the handler is "handle extract routine headers", handle extract routine headers; exit.
  if the handler is "handle extract types", handle extract types; exit.
  if the handler is "handle extract nibble literal", handle extract nibble literal; exit.
  if the handler is "handle find", handle find; exit.
  if the handler is "handle find next", handle find next; exit.
  if the handler is "handle flip", handle flip; exit.
  if the handler is "handle get size", handle get size; exit.
  if the handler is "handle grayscale", handle grayscale given yes; exit.
  if the handler is "handle group", handle group; exit.
  if the handler is "handle grid given no", handle grid given no; exit.
  if the handler is "handle grid given yes", handle grid given yes; exit.
  if the handler is "handle indent", handle indent; exit.
  if the handler is "handle label given title", handle label given "title"; exit.
  if the handler is "handle label given page number", handle label given "page number"; exit.
  if the handler is "handle label given page number (even)", handle label given "page number (even)"; exit.
  if the handler is "handle label given page number (odd)", handle label given "page number (odd)"; exit.
  if the handler is "handle list", handle list; exit.
  if the handler is "handle lowercase", handle lowercase; exit.
  if the handler is "handle measure", handle measure; exit.
  if the handler is "handle minimize", handle minimize; exit.
  if the handler is "handle maximize", handle maximize; exit.
  if the handler is "handle mirror", handle mirror; exit.
  if the handler is "handle new directory", handle new directory; exit.
  if the handler is "handle new document", handle new document; exit.
  if the handler is "handle new ellipse", handle new shape given "ellipse"; exit.
  if the handler is "handle new page", handle new page; exit.
  if the handler is "handle new picture", handle new shape given "picture"; exit.
  if the handler is "handle new polygon", handle new shape given "polygon"; exit.
  if the handler is "handle new rectangle", handle new shape given "rectangle"; exit.
  if the handler is "handle new text", handle new shape given "text"; exit.
  if the handler is "handle new text file", handle new text file; exit.
  if the handler is "handle open", handle open; exit.
  if the handler is "handle open as dump", handle open as dump; exit.
  if the handler is "handle open as text", handle open as text; exit.
  if the handler is "handle outdent", handle outdent; exit.
  if the handler is "handle paste", handle paste; exit.
  if the handler is "handle print", handle print; exit.
  if the handler is "handle quit", handle quit; exit.
  if the handler is "handle redo", handle redo; exit.
  if the handler is "handle reduce", handle reduce; exit.
  if the handler is "handle rename", handle rename; exit.
  if the handler is "handle renumber pages", handle renumber pages; exit.
  if the handler is "handle restore", handle restore; exit.
  if the handler is "handle reverse", handle reverse; exit.
  if the handler is "handle rotate page", handle rotate page; exit.
  if the handler is "handle rotate shape", handle rotate shape; exit.
  if the handler is "handle run", handle run; exit.
  if the handler is "handle save", handle save; exit.
  if the handler is "handle save all", handle save all; exit.
  if the handler is "handle save as pdf", handle save as pdf; exit.
  if the handler is "handle select all", handle select all; exit.
  if the handler is "handle send to back", handle send to back; exit.
  if the handler is "handle test quota", handle test quota; exit.
  if the handler starts with "handle test result ", handle the command (copy test result); exit.
  if the handler is "handle smooth", handle smooth; exit.
  if the handler is "handle sort definitions", handle sort definitions; exit.
  if the handler is "handle sort selected lines", handle sort selected lines; exit.
  if the handler is "handle sort nodettes by extension",
    handle sort nodettes given "extension"; exit.
  if the handler is "handle sort nodettes by kind", handle sort nodettes given "kind"; exit.
  if the handler is "handle sort nodettes by name", handle sort nodettes given "name"; exit.
  if the handler is "handle stop", handle stop; exit.
  if the handler is "handle uncomment", handle uncomment; exit.
  if the handler is "handle undo", handle undo; exit.
  if the handler is "handle ungrayscale", handle grayscale given no; exit.
  if the handler is "handle ungroup", handle ungroup; exit.
  if the handler is "handle unlabel", handle unlabel; exit.
  if the handler is "handle uppercase", handle uppercase; exit.
  if the handler is "handle version", handle version; exit.
  if the handler is "handle yank the tpp", handle yank given the tpp; exit.
  if the handler starts with "handle yank ", handle yank given the handler (general); exit.
  \ not properly dispatched
  debug the handler (because it is undispatched).

to handle a command (alignment...):
  create a submenu.
  add "Align Left" to the submenu.
  add "Align Center" to the submenu.
  add "Align Right" to the submenu.
  handle the command given the submenu.

to handle a command (border...):
  create a submenu.
  add swatches to the submenu given "handle border".
  handle the command given the submenu and the palette width.

to handle a command (check spelling...):
  create a submenu.
  add "Current Page Only" and "handle check spelling (current page only)" to the submenu.
  add "Entire Document" and "handle check spelling (entire document)" to the submenu.
  handle the command given the submenu.

to handle a command (color...):
  create a submenu.
  add "Border..." and "border..." to the submenu.
  add "Fill..." and "fill..." to the submenu.
  add "Pen..." and "pen..." to the submenu.
  handle the command given the submenu.

to handle a command (fill...):
  create a submenu.
  add swatches to the submenu given "handle fill".
  handle the command given the submenu and the palette width.

to handle a command (font height...):
  create a submenu.
  add "1 Inch" and "handle font height given 1 inch" to the submenu.
  add "1/2 Inch" and "handle font height given 1/2 inch" to the submenu.
  add "1/3 Inch" and "handle font height given 1/3 inch" to the submenu.
  add "1/4 Inch" and "handle font height given 1/4 inch" to the submenu.
  add "1/5 Inch" and "handle font height given 1/5 inch" to the submenu.
  add "1/6 Inch" and "handle font height given 1/6 inch" to the submenu.
  add "1/8 Inch" and "handle font height given 1/8 inch" to the submenu.
  add "Other" then the ellipsis byte and "handle font height other" to the submenu.
  get a font.
  describe the font's height returning a string.
  highlight the string in the submenu.
  handle the command given the submenu.

to handle a command (grid...):
  create a submenu.
  add "Hide" and "handle grid given no" to the submenu.
  add "Show" and "handle grid given yes" to the submenu.
  handle the command given the submenu.

to handle a command (label...):
  create a submenu.
  add "Title"  and "handle label given title" to the submenu.
  add "Page Number"  and "handle label given page number" to the submenu.
  add "Page Number (Even)"  and "handle label given page number (even)" to the submenu.
  add "Page Number (Odd)"  and "handle label given page number (odd)" to the submenu.
  handle the command given the submenu.

to handle a command (letter):
  create a submenu.
  populate the submenu given the command's handler and the current tab's mode (letter).
  handle the command given the submenu.

to handle a command (pen...):
  create a submenu.
  add swatches to the submenu given "handle pen".
  handle the command given the submenu and the palette width.

to handle a command (sort...):
  create a submenu.
  if the current tab's mode is "editor",
    add "Definitions"  and "handle sort definitions" to the submenu.
  if the current tab's mode is "editor",
    add "Selected Lines"  and "handle sort selected lines" to the submenu.
  if the current tab's mode is "finder",
    add "By Kind"  and "handle sort nodettes by kind" to the submenu.
  if the current tab's mode is "finder",
    add "By Name"  and "handle sort nodettes by name" to the submenu.
  if the current tab's mode is "finder",
    add "By Extension"  and "handle sort nodettes by extension" to the submenu.
  handle the command given the submenu.

to handle a command given a submenu:
  handle the command given the submenu and the submenu width.

to handle a command given a submenu and a width:
  put the command's left and the bar's display's bottom into a spot.
  adjust the submenu given the spot and the width.
  flush all events.
  void the selected command.
  put the submenu into the current menu.
  show the desktop.
  handle events given the submenu.
  void the current menu.
  handle the selected command.
  destroy the submenu.
  show the desktop.
  refresh the cursor.

to handle comment:
  if the current tab's mode is "editor",
    handle comment given the current tab's node's source; exit.
  cluck.

to handle compile:
  if the current tab's mode is not "editor", cluck; exit.
  handle save all.
  if the i/o error is not blank, exit.
  find a directory to compile.
  if the directory is blank, show error "I'm not sure what to compile."; exit.
  compile the directory.
  if the compiler's abort flag is set, handle compile or list or run error; exit.
  show status the compiler's timer's string then " ms".

to handle compile or list or run error:
  untint the status.
  if the compiler's abort path is blank, show error the compiler's abort message; exit.
  loop.
  get a tab from the tabs.
  if the tab is nil, show error the compiler's abort message; exit.
  if the compiler's abort path is not the tab's node's path, repeat.
  if the tab's node's source is nil, show error the compiler's abort message; exit.
  select the compiler's abort row# given the tab's node's source's text.
  scroll the tab's node's source's text to the caret and center it.
  switch to the tab.
  show the desktop.
  show error the compiler's abort message.

to handle copy:
  if the current tab's mode is "finder",
    handle copy given the current tab's node; exit.
  if the current tab's mode is "editor",
    handle copy given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    handle copy given the current tab's node's document; exit.
  if the current tab's mode is "writer",
    handle copy given the current tab's node's page; exit.
  cluck.

to handle cut:
  if the current tab's mode is "finder",
    handle cut given the current tab's node; exit.
  if the current tab's mode is "editor",
    handle cut given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    handle cut given the current tab's node's document; exit.
  if the current tab's mode is "writer",
    handle cut given the current tab's node's page; exit.
  cluck.

to handle decrypt:
  if the current tab's mode is "editor",
    handle decrypt given the current tab's node's source; exit.
  cluck.

to handle duplicate:
  if the current tab's mode is "finder",
    handle duplicate given the current tab's node; exit.
  if the current tab's mode is "docster",
    handle duplicate given the current tab's node's document; exit.
  if the current tab's mode is "writer",
    handle duplicate given the current tab's node's page; exit.
  cluck.

to handle encrypt:
  if the current tab's mode is "editor",
    handle encrypt given the current tab's node's source; exit.
  cluck.

to handle enlarge:
  if the current tab's mode is "writer",
    handle enlarge given the current tab's node's page; exit.
  cluck.

to handle an event:
  if the event is nil, exit.
  if the event's kind is "key down", handle the event (key down); exit.
  if the event's kind is "left click", handle the event (left click); exit.
  if the event's kind is "left double click", handle the event (left double click); exit.
  if the event's kind is "refresh", handle the event (refresh); exit.
  if the event's kind is "right click", handle the event (right click); exit.
  if the event's kind is "set cursor", handle the event (set cursor); exit.

to handle an event (key down - ctrl-tab):
  if the event's shift flag is set, switch to the predecessor of the current tab.
  if the event's shift flag is not set, switch to the successor of the current tab.
  show the desktop with status.

to handle an event (key down - shortcut):
  if the event's key is the a-key, handle select all; exit.
  if the event's key is the c-key, handle copy; exit.
  if the event's key is the d-key, handle duplicate; exit.
  if the event's key is the e-key, handle enlarge; exit.
  if the event's key is the f-key, handle find; exit.
  if the event's key is the g-key, handle group; exit.
  if the event's key is the i-key, handle indent; exit.
  if the event's key is the j-key, handle rotate shape; exit.
  if the event's key is the l-key, handle list; exit.
  if the event's key is the m-key and the current tab's mode is "editor", handle compile; exit.
  if the event's key is the m-key and the current tab's mode is "writer", handle smooth; exit.
  if the event's key is the n-key, handle find next; exit.
  if the event's key is the o-key and the current tab's mode is "editor", handle outdent; exit.
  if the event's key is the o-key, handle open; exit.
  if the event's key is the p-key, handle print; exit.
  if the event's key is the q-key, handle quit; exit.
  if the event's key is the r-key and the current tab's mode is "editor", handle run; exit.
  if the event's key is the r-key and the current tab's mode is "writer", handle reduce; exit.
  if the event's key is the s-key, handle save; exit.
  if the event's key is the t-key, handle comment; exit.
  if the event's key is the u-key and the current tab's mode is "editor", handle uncomment; exit.
  if the event's key is the u-key and the current tab's mode is "writer", handle ungroup; exit.
  if the event's key is the v-key, handle paste; exit.
  if the event's key is the w-key, handle close; exit.
  if the event's key is the x-key, handle cut; exit.
  if the event's key is the y-key, handle redo; exit.
  if the event's key is the z-key, handle undo; exit.
  \ Visual Studio's shortcuts are listed at:
  \ http://www.dofactory.com/ShortCutKeys/ShortCutKeys.aspx
  \ the f1-key is for context-sensitive help.
  \ Windows Explorer uses the f2-key for renaming.
  \ f3 is for find or find next.  Shift-f3 is for find previous.
  if the event's key is the f3-key, handle find next; exit.
  \ the f5-key is for refresh.  For example, to run a program being compiled or interpreted.
  if the event's key is the f5-key and the current tab's mode is "editor", handle run; exit.
  \ the f6-key is for moving between panes or windows.
  \ In Microsoft Office, the f9-key recalculates or updates calculated fields.
  \ the f11-key is for toggling full-screen mode.
  if the event's key is the f11-key, handle toggle screensize; exit.
  if the event's key is any function key, exit.
  cluck.

to handle an event (key down):
  if the event is any shortcut, handle the event (key down - shortcut); exit.
  if the event is ctrl-tab, handle the event (key down - ctrl-tab); exit.
  if the current tab's mode is "finder",
    handle the event given the current tab's node (key down); exit.
  if the current tab's mode is "editor",
    handle the event given the current tab's node's source (key down); exit.
  if the current tab's mode is "docster",
    handle the event given the current tab's node's document (key down); exit.
  if the current tab's mode is "writer",
    handle the event given the current tab's node's page (key down); exit.

to handle an event (left click - menu):
  find a command given the menu and the event's spot.
  handle the command.

to handle an event (left click - switch):
  find a tab given the event's spot.
  if the tab is nil, exit.
  if the tab is the current tab, set a flag.
  switch to the tab.
  show the desktop with status.
  track the tab returning another flag.
  if the other flag is set, exit.
  if the flag is not set, exit.
  handle close.

to handle an event (left click):
  if the event's spot is in the menu, handle the event (left click - menu); exit.
  if the event's spot is in the status, handle the event (left click - status); exit.
  if the event's spot is in the switch, handle the event (left click - switch); exit.
  if the current tab's mode is "finder",
    handle the event given the current tab's node (left click); exit.
  if the current tab's mode is "editor",
    handle the event given the current tab's node's source (left click); exit.
  if the current tab's mode is "docster",
    handle the event given the current tab's node's document (left click); exit.
  if the current tab's mode is "writer",
    handle the event given the current tab's node's page (left click); exit.

to handle an event (left double click):
  if the event's spot is in the bar, exit.
  if the event's spot is in the switch, exit.
  if the current tab's mode is "finder",
    handle the event given the current tab's node (left double click); exit.
  if the current tab's mode is "editor",
    handle the event given the current tab's node's source (left double click); exit.
  if the current tab's mode is "docster",
    handle the event given the current tab's node's document (left double click); exit.
  if the current tab's mode is "writer",
    handle the event given the current tab's node's page (left double click); exit.

to handle an event (refresh):
  show the desktop with status.

to handle an event (right click):
  if the current tab's mode is "finder",
    handle the event given the current tab's node (right click); exit.
  if the current tab's mode is "editor",
    handle the event given the current tab's node's source (right click); exit.
  if the current tab's mode is "docster",
    handle the event given the current tab's node's document (right click); exit.
  if the current tab's mode is "writer",
    handle the event given the current tab's node's page (right click); exit.

to handle an event (set cursor):
  if the current tab's mode is "finder",
    handle the event given the current tab's node (set cursor); exit.
  if the current tab's mode is "editor",
    handle the event given the current tab's node's source (set cursor); exit.
  if the current tab's mode is "docster",
    handle the event given the current tab's node's document (set cursor); exit.
  if the current tab's mode is "writer",
    handle the event given the current tab's node's page (set cursor); exit.
  show the arrow cursor.

to handle an event given a submenu:
  if the event's kind is "key down",
    handle the event given the submenu (key down); exit.
  if the event's kind is "left click",
    handle the event given the submenu (left click); exit.
  if the event's kind is "refresh",
    handle the event given the submenu (refresh); exit.
  if the event's kind is "set cursor",
    handle the event given the submenu (set cursor); exit.

to handle an event given a submenu (key down):
  if the event's key is the escape key, relinquish control.

to handle an event given a submenu (left click - menu):
  find a command given the submenu and the event's spot.
  if the command is nil, exit.
  put the command into the selected command.
  relinquish control.

to handle an event given a submenu (left click):
  if the event's spot is in the submenu,
    handle the event given the submenu (left click - menu); exit.
  relinquish control.
  if the event's spot is in the menu, reque the event.

to handle an event given a submenu (refresh):
  show the desktop.

to handle an event given a submenu (set cursor):
  show the arrow cursor.

to handle events:
  deque an event.
  if the event is nil, exit.
  handle the event.
  repeat.

to handle events given a submenu:
  deque an event.
  if the event is nil, exit.
  handle the event given the submenu.
  repeat.

to handle extract globals:
  if the current tab's mode is "editor",
    handle extract globals given the current tab's node's source; exit.
  cluck.

to handle extract nibble literal:
  if the current tab's mode is "finder",
    handle extract nibble literal given the current tab's node; exit.
  cluck.

to handle extract routine headers:
  if the current tab's mode is "editor",
    handle extract routine headers given the current tab's node's source; exit.
  cluck.

to handle extract types:
  if the current tab's mode is "editor",
    handle extract types given the current tab's node's source; exit.
  cluck.

to handle fill given a color:
  if the current tab's mode is "writer",
    handle fill given the current tab's node's page and the color; exit.
  cluck.

to handle find:
  if the current tab's mode is "editor",
    handle find given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    handle find given the current tab's node's page; exit.
  cluck.

to handle find next:
  if the current tab's mode is "editor",
    handle find next given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    handle find next given the current tab's node's page; exit.
  cluck.

to handle flip:
  if the current tab's mode is "writer",
    handle flip given the current tab's node's page; exit.
  cluck.

to handle font height given a font height:
  if the current tab's mode is "editor",
    handle font height given the current tab's node's source and the font height; exit.
  if the current tab's mode is "writer",
    handle font height given the current tab's node's page and the font height; exit.
  cluck.

to handle font height given a handler (general):
  put "handle font height given " in a prefix.
  get a height from the handler given the prefix.
  if the height is not positive,
      debug the handler (because it is undispatched); exit.
  handle font height given the height.

to handle font height other:
  if the current tab's mode is "editor",
    handle font height other given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    handle font height other given the current tab's node's page; exit.

to handle font name:
  if the current tab's mode is "editor",
    handle font name given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    handle font name given the current tab's node's page; exit.

to handle get size:
  if the current tab's mode is "finder",
    handle get size given the current tab's node; exit.
  cluck.

to handle grayscale given a flag:
  if the current tab's mode is "writer",
    handle grayscale given the current tab's node's page and the flag; exit.
  cluck.

to handle grid given a flag:
  if the current tab's mode is "writer",
    handle grid given the current tab's node's page and the flag; exit.
  cluck.

to handle group:
  if the current tab's mode is "writer",
    handle group given the current tab's node's page; exit.
  cluck.

to handle indent:
  if the current tab's mode is "editor",
    handle indent given the current tab's node's source; exit.
  cluck.

to handle label given a label:
  if the current tab's mode is "writer",
    handle label given the current tab's node's page and the label; exit.
  cluck.

to handle list:
  if the current tab's mode is not "editor", cluck; exit.
  handle save all.
  if the i/o error is not blank, exit.
  find a directory to compile.
  if the directory is blank,
    show error "I'm not sure what to compile and list"; exit.
  compile the directory.
  show status "Listing...".
  list.
  if the compiler's abort flag is set,
    handle compile or list or run error; exit.
  show status the compiler's timer's string then " ms".

to handle lowercase:
  if the current tab's mode is "editor",
    handle lowercase given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    handle lowercase given the current tab's node's page; exit.
  cluck.

to handle measure:
  if the current tab's mode is "writer",
    handle measure given the current tab's node's page; exit.
  cluck.

to handle mirror:
  if the current tab's mode is "writer",
    handle mirror given the current tab's node's page; exit.
  cluck.

to handle new directory:
  if the current tab's mode is "finder",
    handle new directory given the current tab's node; exit.
  cluck.

to handle new document:
  if the current tab's mode is "finder",
    handle new document given the current tab's node; exit.
  cluck.

to handle new page:
  if the current tab's mode is "docster",
    handle new page given the current tab's node's document; exit.
  cluck.

to handle new shape given a kind:
  if the current tab's mode is "writer",
    handle new shape given the current tab's node's page and the kind; exit.
  cluck.

to handle new text file:
  if the current tab's mode is "finder",
    handle new text file given the current tab's node; exit.
  cluck.

to handle open:
  if the current tab's mode is "finder", handle open (finder); exit.
  if the current tab's mode is "docster", handle open (docster); exit.
  cluck.

to handle open (docster):
  handle open without drawing (docster).
  show the desktop with status.
  flush the event queue.
  refresh the cursor.

to handle open (finder):
  if the current tab's mode is not "finder", cluck; exit.
  get some selected path links given the current tab's node.
  if the selected path links are empty,
    show error "I'm not sure what you want me to open."; exit.
  show status "Opening...".
  put the current tab into a tab.
  loop.
  get a path link from the selected path links.
  if the path link is nil, break.
  collapse the tab's node to root-level.
  open the tab's node given the path link's string.
  switch the tab to the tab's node.
  switch to the tab.
  if the i/o error is not blank, show error the i/o error; break.
  if the tab's node should be read-only, set the tab's node to read-only mode.
  find a free tab starting with the tab's next.
  if the free tab is nil, break.
  put the free tab into the tab.
  repeat.
  destroy the selected path links.
  show the desktop with status.
  flush the event queue.
  refresh the cursor.

to handle open as dump:
  if the current tab's mode is not "finder", cluck; exit.
  put the current tab's node's first selected nodette into a nodette.
  if the nodette is nil,
    show error "I'm not sure what you want me to open."; exit.
  if the nodette's kind is not "file", cluck; exit.
  show status "Opening...".
  open the nodette (file as dump).
  if the i/o error is not blank, show error the i/o error; exit.
  switch the current tab to the nodette.
  show the desktop with status.
  flush the event queue.

to handle open as text:
  if the current tab's mode is not "finder", cluck; exit.
  put the current tab's node's first selected nodette into a nodette.
  if the nodette is nil,
    show error "I'm not sure what you want me to open."; exit.
  if the nodette's kind is not "file", cluck; exit.
  show status "Opening...".
  open the nodette (file as text).
  if the i/o error is not blank, show error the i/o error; exit.
  switch the current tab to the nodette.
  show the desktop with status.
  flush the event queue.

to handle open without drawing (docster):
  put the current tab's node's document's first selected page into an page.
  if the page is nil,
    show error "I'm not sure what you want me to open."; exit.
  focus on the page in the current tab's node's document.
  put the page into the current tab's node's page.
  open the current tab's node's page.
  switch the current tab to the current tab's node.

to handle outdent:
  if the current tab's mode is "editor",
    handle outdent given the current tab's node's source; exit.
  cluck.

to handle paste:
  if the current tab's mode is "finder",
    handle paste given the current tab's node; exit.
  if the current tab's mode is "editor",
    handle paste given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    handle paste given the current tab's node's document; exit.
  if the current tab's mode is "writer",
    handle paste given the current tab's node's page; exit.
  cluck.

to handle pen given a color:
  if the current tab's mode is "writer",
    handle pen given the current tab's node's page and the color; exit.
  cluck.

to handle print:
  if the current tab's mode is "editor",
    handle print given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    handle print given the current tab's node's document; exit.
  if the current tab's mode is "writer",
    handle print given the current tab's node's page; exit.
  cluck.

to handle quit:
  if the user is not sure, exit.
  loop.
  show status "Quitting...".
  get a tab from the tabs.
  if the tab is nil, relinquish control; exit.
  if the tab's node is not modified, repeat.
  switch to the tab.
  show the desktop.
  if the user is not willing to close the tab's node, exit.
  repeat.

to handle radius:
  if the current tab's mode is "writer",
    handle radius given the current tab's node's page; exit.
  cluck.

to handle redo:
  if the current tab's mode is "editor",
    handle redo given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    handle redo given the current tab's node's page; exit.
  cluck.

to handle reduce:
  if the current tab's mode is "writer",
    handle reduce given the current tab's node's page; exit.
  cluck.

to handle rename:
  if the current tab's mode is "finder",
    handle rename given the current tab's node; exit.
  cluck.

to handle renumber pages:
  if the current tab's mode is "docster",
    handle renumber pages given the current tab's node's document; exit.
  cluck.

to handle reverse:
  if the current tab's mode is "finder",
    handle reverse given the current tab's node; exit.
  if the current tab's mode is "editor",
    handle reverse given the current tab's node's source; exit.
  cluck.

to handle rotate page:
  if the current tab's mode is "writer",
    handle rotate page given the current tab's node's page; exit.
  cluck.

to handle rotate shape:
  if the current tab's mode is "writer",
    handle rotate shape given the current tab's node's page; exit.
  cluck.

to handle run:
  if the current tab's mode is not "editor", cluck; exit.
  handle save all.
  untint the status.
  if the i/o error is not blank, exit.
  find a directory to compile.
  if the directory is blank,
    show error "I'm not sure what you want me to compile."; exit.
  compile the directory.
  if the compiler's abort flag is set,
    handle compile or list or run error; exit.
  show status "Running...".
  start the current process given the compiler's exe path.
  if the i/o error is not blank, show error the i/o error; exit.
  show status the compiler's timer's string then " ms".

to handle save:
  if the current tab's node is not savable, cluck;
    show status "Unable to save"; exit.
  show status "Saving...".
  save the current tab's node.
  if the i/o error is not blank, show error the i/o error; exit.
  show status "Saved".

to handle save all:
  show status "Saving...".
  put 0 into a count.
  clear the i/o error.
  loop.
  get a tab from the tabs.
  if the tab is nil, show status the count and "file saved" or "files saved"; exit.
  if the tab's node is not savable, repeat.
  save the tab's node.
  if the i/o error is blank, add 1 to the count; repeat.
  switch to the tab.
  show the desktop.
  show error the i/o error.

to handle save as pdf:
  if the current tab's mode is "docster",
    handle save as pdf given the current tab's node's document; exit.
  cluck.

to handle select all:
  if the current tab's mode is "finder",
    handle select all given the current tab's node; exit.
  if the current tab's mode is "editor",
    handle select all given the current tab's node's source; exit.
  if the current tab's mode is "docster",
    handle select all given the current tab's node's document; exit.
  if the current tab's mode is "writer",
    handle select all given the current tab's node's page; exit.
  cluck.

to handle send to back:
  if the current tab's mode is "writer",
    handle send to back given the current tab's node's page; exit.
  cluck.

to handle smooth:
  if the current tab's mode is "writer",
    handle smooth given the current tab's node's page; exit.
  cluck.

to handle sort definitions:
  if the current tab's mode is "editor",
    handle sort definitions given the current tab's node's source; exit.
  cluck.

to handle sort nodettes given a string:
  if the current tab's mode is "finder",
    handle sort nodettes given the current tab's node and the string; exit.
  cluck.

to handle sort selected lines:
  if the current tab's mode is "editor",
    handle sort selected lines given the current tab's node's source; exit.
  cluck.

to handle stop:
  if the current process is 0, cluck; exit.
  show status "Stopping...".
  stop the current process.
  show status "Stopped".

to handle uncomment:
  if the current tab's mode is "editor",
    handle uncomment given the current tab's node's source; exit.
  cluck.

to handle undo:
  if the current tab's mode is "editor",
    handle undo given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    handle undo given the current tab's node's page; exit.
  cluck.

to handle ungroup:
  if the current tab's mode is "writer",
    handle ungroup given the current tab's node's page; exit.
  cluck.

to handle unlabel:
  if the current tab's mode is "writer",
    handle unlabel given the current tab's node's page; exit.
  cluck.

to handle uppercase:
  if the current tab's mode is "editor",
    handle uppercase given the current tab's node's source; exit.
  if the current tab's mode is "writer",
    handle uppercase given the current tab's node's page; exit.
  cluck.

to handle version:
  show status the module's name.

to handle yank given a handler (general):
  put "handle yank given " in a prefix.
  get a height from the handler given the prefix.
  if the height is not positive,
      debug the handler (because it is undispatched); exit.
  handle yank given the height.

to handle yank given a number:
  if the current tab's mode is "writer",
    handle yank given the current tab's node's page and the number; exit.
  cluck.

a handler is a string.

to highlight a string in a submenu:
  loop.
    get a command from the submenu's commands.
    if the command is nil, break.
    if the command's name is the string,
      put the lightest yellow color in the command's color; break.
    if the command's name is "Other...",
      put the lightest yellow color in the command's color; break.
  repeat.

to resize:
  resize the desktop.
  resize the finder.
  resize the editor.
  resize the writer.

to initialize:
  initialize the desktop.
  initialize the finder.
  initialize the editor.
  initialize the writer.
  initialize the compiler.
  fill the tabs.
  switch to the tabs' first.

to resize the bar:
  put 1/4 inch plus 1/3 inch plus 1/4 inch into the bar's height.
  put the screen's left into the bar's left.
  put the screen's top into the bar's top.
  put the screen's right into the bar's right.
  put the screen's top plus the bar's height into the bar's bottom.
  put the bar's box into the bar's display.
  adjust the bar's display given 1/4 inch and 1/4 inch and -1/4 inch and -1/4 inch.
  destroy the menu.
  create the menu.
  
to initialize the bar:
  put "normal" into the bar's mode.
  resize the bar.
  initialize the status.

to resize the desktop:
  resize the bar.
  resize the status.
  resize the switch.
  resize the pad. \ uses the bar and the switch

to initialize the desktop:
  put the lightest gray color into the desktop color.
  put the light sky color into the comment color.
  put the lightest sky color into the grid color.
  initialize the bar.
  initialize the switch.
  initialize the pad. \ uses the bar and the switch

to resize the pad:
  put the screen's left into the pad's left.
  put the bar's bottom into the pad's top.
  put the screen's right into the pad's right.
  put the switch's top into the pad's bottom.

to initialize the pad:
  resize the pad.

to resize the switch:
  put 1/4 inch plus 1/3 inch into the switch's height.
  put the screen's left into the switch's left.
  put the screen's bottom minus the switch's height into the switch's top.
  put the screen's right into the switch's right.
  put the screen's bottom into the switch's bottom.
  adjust the tabs.

to initialize the switch:
  initialize the tabs.
  resize the switch.

to initialize some tabs:
  add 1 to a count.
  if the count is greater than 10, break.
  create a tab.
  append the tab to the tabs.
  repeat.

the menu is a menu.

a menu is a thing with some commands.

a mode is a string.

the pad has a box.

the palette width is a width equal to 2-1/3 inches.

a pass color is a color.

to pass a test result given a string called expectation and a string called actual:
  populate the test result given the expectation and the actual and the expectation.

to populate a submenu given a handler and a mode (letter):
  if the handler is "a", populate the submenu given the mode (a); exit.
  if the handler is "b", populate the submenu given the mode (b); exit.
  if the handler is "c", populate the submenu given the mode (c); exit.
  if the handler is "d", populate the submenu given the mode (d); exit.
  if the handler is "e", populate the submenu given the mode (e); exit.
  if the handler is "f", populate the submenu given the mode (f); exit.
  if the handler is "g", populate the submenu given the mode (g); exit.
  if the handler is "h", populate the submenu given the mode (h); exit.
  if the handler is "i", populate the submenu given the mode (i); exit.
  if the handler is "j", populate the submenu given the mode (j); exit.
  if the handler is "k", populate the submenu given the mode (k); exit.
  if the handler is "l", populate the submenu given the mode (l); exit.
  if the handler is "m", populate the submenu given the mode (m); exit.
  if the handler is "n", populate the submenu given the mode (n); exit.
  if the handler is "o", populate the submenu given the mode (o); exit.
  if the handler is "p", populate the submenu given the mode (p); exit.
  if the handler is "q", populate the submenu given the mode (q); exit.
  if the handler is "r", populate the submenu given the mode (r); exit.
  if the handler is "s", populate the submenu given the mode (s); exit.
  if the handler is "t", populate the submenu given the mode (t); exit.
  if the handler is "u", populate the submenu given the mode (u); exit.
  if the handler is "v", populate the submenu given the mode (v); exit.
  if the handler is "w", populate the submenu given the mode (w); exit.
  if the handler is "x", populate the submenu given the mode (x); exit.
  if the handler is "y", populate the submenu given the mode (y); exit.
  if the handler is "z", populate the submenu given the mode (z); exit.

to populate a submenu given a mode (a):
  if the current tab's mode is "writer", add "Align Left" to the submenu.
  if the current tab's mode is "writer", add "Align Center" to the submenu.
  if the current tab's mode is "writer", add "Align Right" to the submenu.

to populate a submenu given a mode (b):
  if the mode is "writer", add "Border..." and "border..." to the submenu.
  if the mode is "writer", add "Bring to Front" and "handle bring to front" to the submenu.

to populate a submenu given a mode (c):
  if the mode is "editor", add "Capitalize" to the submenu.
  if the mode is "writer", add "Capitalize" to the submenu.
  if the mode is "editor", add "Check Spelling" to the submenu.
  if the mode is "writer",
    add "Check Spelling..." and "check spelling..." to the submenu.
  add "Close" and "W" and "handle close" to the submenu.
  add "Close All" to the submenu.
  if the current tab's mode is "writer",
    add "Color..." and "color..." to the submenu.
  if the mode is "editor",
    add "Comment" and "T" and "handle comment" to the submenu.
  if the mode is "editor",
    add "Compile" and "M" and "handle compile" to the submenu.
  add "Copy" and "C" and "handle copy" to the submenu.
  add "Cut" and "X" and "handle cut" to the submenu.

to populate a submenu given a mode (d):
  if the mode is "editor", add "Decrypt..." to the submenu.
  if the mode is "finder",
    add "Duplicate" and "D" and "handle duplicate" to the submenu.
  if the mode is "docster",
    add "Duplicate" and "D" and "handle duplicate" to the submenu.
  if the mode is "writer",
    add "Duplicate" and "D" and "handle duplicate" to the submenu.

to populate a submenu given a mode (e):
  if the mode is "writer", add "Enlarge" and "E" and "handle enlarge" to the submenu.
  if the mode is "editor", add "Encrypt..." to the submenu.
  if the mode is "editor", add "Extract Types" to the submenu.
  if the mode is "editor", add "Extract Globals" to the submenu.
  if the mode is "editor", add "Extract Routine Headers" to the submenu.
  if the mode is "finder", add "Extract Nibble Literal" to the submenu.

to populate a submenu given a mode (f):
  if the mode is "editor", add "Find" and "F" and "handle find" to the submenu.
  if the mode is "writer", add "Find" and "F" and "handle find" to the submenu.
  if the mode is "editor", add "Find Next" and "N" and "handle find next" to the submenu.
  if the mode is "writer", add "Find Next" and "N" and "handle find next" to the submenu.
  if the mode is "writer", add "Fill..." to the submenu.
  if the mode is "writer", add "Flip" to the submenu.
  if the mode is "editor", add "Font Height..." and "font height..." to the submenu.
  if the mode is "editor", add "Font Name..." to the submenu.
  if the mode is "writer", add "Font Height..." and "font height..." to the submenu.
  if the mode is "writer", add "Font Name..." to the submenu.

to populate a submenu given a mode (g):
  if the mode is "finder", add "Get Size" to the submenu.
  if the mode is "writer", add "Grayscale" to the submenu.
  if the mode is "writer", add "Grid..." and "grid..." to the submenu.
  if the mode is "writer", add "Group" and "G" and "handle group" to the submenu.

to populate a submenu given a mode (h):
  if the mode is "writer", add "Hide Grid" and "handle grid given no" to the submenu.

to populate a submenu given a mode (i):
  if the mode is "editor", add "Indent" and "I" and "handle indent" to the submenu.

to populate a submenu given a mode (j):

to populate a submenu given a mode (k):

to populate a submenu given a mode (l):
  if the mode is "editor", add "List" and "L" and "handle list" to the submenu.
  if the mode is "editor", add "Lowercase" to the submenu.
  if the mode is "writer", add "Label..." and "Label..." to the submenu.
  if the mode is "writer", add "Lowercase" to the submenu.

to populate a submenu given a mode (m):
  if it is possible to unminimize,
    add "Minimize" and "handle minimize" to the submenu.
  if it is not possible to unminimize,
    add "Minimize" and "handle minimize" and the desktop color to the submenu.
  if the main window is minimized,
    add "Maximize" and "F11" and "handle maximize" to the submenu.
  if the screen is maximized given the main window,
    add "Maximize" and "F11" and "handle maximize" and the desktop color to the submenu.
  if the screen is restored given the main window,
    add "Maximize" and "F11" and "handle maximize" to the submenu.
  if the mode is "writer", add "Measure..." to the submenu.
  if the mode is "writer", add "Mirror" to the submenu.

to populate a submenu given a mode (n):
  if the mode is "finder", add "New Directory..." to the submenu.
  if the mode is "finder", add "New Document..." to the submenu.
  if the mode is "writer", add "New Ellipse" to the submenu.
  if the mode is "docster", add "New Page" to the submenu.
  if the mode is "writer", add "New Picture..." to the submenu.
  if the mode is "writer", add "New Polygon" to the submenu.
  if the mode is "writer", add "New Rectangle" to the submenu.
  if the mode is "writer", add "New Text" to the submenu.
  if the mode is "finder", add "New Text File..." to the submenu.

to populate a submenu given a mode (o):
  if the mode is "finder",  add "Open" and "O" and "handle open" to the submenu.
  if the mode is "docster", add "Open" and "O" and "handle open" to the submenu.
  if the mode is "finder",  add "Open As Dump" to the submenu.
  if the mode is "finder",  add "Open As Text" to the submenu.
  if the mode is "editor",  add "Outdent" and "O" and "handle outdent" to the submenu.

to populate a submenu given a mode (p):
  add "Paste" and "V" and "handle paste" to the submenu.
  if the mode is "writer",  add "Pen..." and "pen..." to the submenu.
  if the mode is "editor",  add "Print..." and "P" and "handle print" to the submenu.
  if the mode is "docster", add "Print..." and "P" and "handle print" to the submenu.
  if the mode is "writer",  add "Print..." and "P" and "handle print" to the submenu.

to populate a submenu given a mode (q):
  add "Quit" and "Q" and "handle quit" to the submenu.

to populate a submenu given a mode (r):
  if the mode is "writer", add "Radius..." to the submenu.
  if the mode is "editor", add "Redo" and "Y" and "handle redo" to the submenu.
  if the mode is "writer", add "Redo" and "Y" and "handle redo" to the submenu.
  if the mode is "writer", add "Reduce" and "R" and "handle reduce" to the submenu.
  if the mode is "finder", add "Rename..." to the submenu.
  if the mode is "docster", add "Renumber Pages..." to the submenu.
  if the screen is maximized given the main window,
    add "Restore" and "F11" and "handle restore" to the submenu.
  if the screen is restored given the main window,
    add "Restore" and "F11" and "handle restore" and the desktop color to the submenu.
  if the main window is minimized,
    add "Restore" and "F11" and "handle restore" to the submenu.
  if the mode is "editor", add "Reverse" to the submenu.
  if the mode is "finder", add "Reverse" to the submenu.
  if the mode is "writer", add "Rotate Page" to the submenu.
  if the mode is "writer", add "Rotate Shape" and "J" and "handle rotate shape" to the submenu.
  if the mode is "editor", add "Run" and "R" and "handle run" to the submenu.

to populate a submenu given a mode (s):
  if the mode is "editor", add "Save" and "S" and "handle save" to the submenu.
  if the mode is "docster", add "Save" and "S" and "handle save" to the submenu.
  if the mode is "writer", add "Save" and "S" and "handle save" to the submenu.
  add "Save All" and "handle save all" to the submenu.
  if the mode is "docster", add "Save as PDF..." and "handle save as pdf" to the submenu.
  add "Select All" and "A" and "handle select all" to the submenu.
  if the mode is "writer", add "Send to Back" and "handle send to back" to the submenu.
  if the mode is "writer", add "Show Grid" and "handle grid given yes" to the submenu.
  if the mode is "writer", add "Smooth" and "M" and "handle smooth" to the submenu.
  if the mode is "editor", add "Sort..." and "sort..." to the submenu.
  if the mode is "finder", add "Sort..." and "sort..." to the submenu.
  if the mode is "editor", add "Stop" to the submenu.

to populate a submenu given a mode (t):

to populate a submenu given a mode (u):
  if the mode is "editor", add "Uncomment" and "U" and "handle uncomment" to the submenu.
  if the mode is "editor", add "Undo" and "Z" and "handle undo" to the submenu.
  if the mode is "writer", add "Undo" and "Z" and "handle undo" to the submenu.
  if the mode is "writer", add "Ungrayscale" to the submenu.
  if the mode is "writer", add "Ungroup" and "U" and "handle ungroup" to the submenu.
  if the mode is "writer", add "Unlabel" to the submenu.
  if the mode is "editor", add "Uppercase" to the submenu.
  if the mode is "writer", add "Uppercase" to the submenu.

to populate a submenu given a mode (v):
  add "Version" to the submenu.

to populate a submenu given a mode (w):

to populate a submenu given a mode (x):

to populate a submenu given a mode (y):
  if the mode is not "writer", exit.
  add "Yank 1/8"  to the submenu.
  add "Yank 1/12" to the submenu.
  add "Yank 1/16" to the submenu.
  add "Yank 1/24" to the submenu.
  add "Yank 1/32" to the submenu.
  add "Yank 1/48" to the submenu.
  add "Yank None" and "handle yank the tpp" to the submenu.

to populate a submenu given a mode (z):

to put a color in part of a submenu given a number:
  if the submenu is nil, exit.
  put 0 in a number called counter.
  loop.
    get a command from the submenu's commands.
    if the command is nil, exit.
    add 1 to the counter.
    if the counter is the number,
      put the color in the command's color; exit.
  repeat.

to put the rest of a handler after a string into another string:
  put the handler into a string called fullstring.
  put the rest of the fullstring after the string into the other string.

to regression test appending to a test result set (the desktop - get height):
  create a test result.
  describe the test result given "the desktop" and "get height".
  put "handle font height given 1/6 inch" in a handler.
  put "handle font height given " in a prefix.
  get a height from the handler given the prefix.
  put the height in a string called actual.
  put the tpi / 6 in a string called expectation.
  if the actual is the expectation,
    pass the test result given the expectation and the actual.
  if the actual is not the expectation,
    fail the test result given the expectation and the actual.
  append the test result to the test result set.

to regression test appending to a test result set (the desktop - get inches string):
  create a test result.
  describe the test result given "the desktop" and "get inches string".
  put "handle font height given 1/6 inch" in a handler.
  put "handle font height given " in a prefix.
  get a residue from the handler after the prefix.
  put the residue in a string called actual.
  put "1/6 inch" in a string called expectation.
  if the actual is the expectation,
    pass the test result given the expectation and the actual.
  if the actual is not the expectation,
    fail the test result given the expectation and the actual.
  append the test result to the test result set.

to regression test appending to a test result set (the desktop - get test number):
  create a test result.
  describe the test result given "the desktop" and "get test number".
  put "handle test result 1" in a handler.
  put "handle test result " in a prefix.
  get a number from the handler given the prefix.
  put the number in a string called actual.
  put 1 in a string called expectation.
  if the actual is the expectation,
    pass the test result given the expectation and the actual.
  if the actual is not the expectation,
    fail the test result given the expectation and the actual.
  append the test result to the test result set.

to regression test appending to a test result set (the desktop):
  regression test appending to the test result set (the desktop - get inches string).
  regression test appending to the test result set (the desktop - get height).
  regression test appending to the test result set (the desktop - get test number).

to remove five bytes from a string:
  remove the last byte from the string.
  remove the last byte from the string.
  remove the last byte from the string.
  remove the last byte from the string.
  remove the last byte from the string.

to run:
  start up.
  initialize.
  handle events.
  finalize.
  shut down.

the selected command is a command.

a shortcut is a string.

to show the desktop:
  draw the desktop.
  refresh the screen.

to show the desktop with status:
  clear the status' string.
  if the current tab's mode is "finder", get the status for the current tab's node.
  if the current tab's mode is "editor", get the status for the current tab's node's source.
  if the current tab's mode is "docster", get the status for the current tab's node's document.
  if the current tab's mode is "writer", get the status for the current tab's node's page.
  show the desktop.

to show the desktop with a string:
  put the string into the status' string.
  show the desktop.

a submenu is a menu.

the submenu width is a width equal to 2 inches.

the swatch width is a width equal to 1/3 inch.

to switch the bar to a mode:
  put the mode into the bar's mode.
  clear the status' string.
  show the desktop.

to switch the bar to a mode without drawing:
  put the mode into the bar's mode.
  clear the status' string.

the switch has a height and a box.

to switch to the predecessor of a tab:
  if the tab is nil, exit.
  put the tab's previous into another tab.
  if the other tab is nil, put the tabs' last into the other tab.
  switch to the other tab.

to switch to the successor of a tab:
  if the tab is nil, exit.
  put the tab's next into another tab.
  if the other tab is nil, put the tabs' first into the other tab.
  switch to the other tab.

to switch to a tab:
  if the tab is nil, exit.
  if the tab is the current tab, exit.
  put the tab into the current tab.

to switch a tab to a node:
  if the tab is nil, exit.
  if the node is nil, exit.
  put the node into the tab's node.
  put the node's designator into the tab's name.
  lowercase the tab's name.
  format the tab's name to fit in the tab's box given the default font.
  put "finder" into the tab's mode.
  if the node's source is not nil, put "editor" into the tab's mode.
  if the node's document is not nil, put "docster" into the tab's mode.
  if the node's page is not nil, put "writer" into the tab's mode.

a tab is a thing with
  a box,
  a name,
  a mode,
  a node.

the tabs are some tabs.

to track the desktop given an event:
  if the event is nil, exit.
  loop.
  if the mouse's left button is up, break.
  put the mouse's spot into a spot.
  if the spot's x is greater than the screen's right, move the main window right; repeat.
  if the spot's x is less than the screen's left, move the main window left; repeat.
  repeat.

to track a tab returning a flag:
  clear the flag.
  if the tab is nil, exit.
  loop.
  if the mouse's left button is up, exit.
  put the mouse's spot into a spot.
  find another tab given the spot.
  if the other tab is nil, repeat.
  if the tab is the other tab, repeat.
  set the flag.
  remove the tab from the tabs.
  if the other tab's left is less than the tab's left,
    insert the tab into the tabs before the other tab.
  if the other tab's left is greater than the tab's left,
    insert the tab into the tabs after the other tab.
  adjust the tabs.
  show the desktop.
  repeat.

to ungray first item of a submenu:
  put the white color in part of the submenu given 1.
